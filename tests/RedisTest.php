<?php
/**
 * Created by PhpStorm.
 * User: Tioncico
 * Date: 2019/9/24 0024
 * Time: 16:16
 */

namespace Test;

use EasySwoole\Redis\Client;
use EasySwoole\Redis\Config\RedisConfig;
use EasySwoole\Redis\Redis;
use PHPUnit\Framework\TestCase;
use Swoole\Coroutine;

class RedisTest extends TestCase
{
    /**
     * @var $redis Redis
     */
    protected $redis;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $redis = new Redis(new RedisConfig());
        $this->redis = $redis;
    }

    /**
     * 字符串单元测试
     * testString
     * @author tioncico
     * Time: 下午9:41
     */
    function testString()
    {
        $key = 'test';
        $value = 1;
        $data = $this->redis->del($key);
        $this->assertNotFalse($data);

        $data = $this->redis->exists($key);
        $this->assertEquals(0, $data);

        $data = $this->redis->set($key, $value);
        $this->assertTrue($data);

        $data = $this->redis->get($key);
        $this->assertEquals($data, $value);

        $data = $this->redis->exists($key);
        $this->assertEquals(1, $data);

        $data = $this->redis->expire($key, 1);
        $this->assertEquals(1, $data);
        Coroutine::sleep(1);
        $this->assertEquals(0, $this->redis->exists($key));

        $data = $this->redis->set($key, $value);
        $this->assertTrue($data);
        $value += 1;
        $data = $this->redis->incr($key);
        $this->assertEquals($value, $data);

        $value += 10;
        $data = $this->redis->incrBy($key, 10);
        $this->assertEquals($value, $data);

        $value -= 1;
        $data = $this->redis->decr($key);
        $this->assertEquals($value, $data);

        $value -= 10;
        $data = $this->redis->decrBy($key, 10);
        $this->assertEquals($value, $data);

    }
}
